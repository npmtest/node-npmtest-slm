{"/home/travis/build/npmtest/node-npmtest-slm/test.js":"/* istanbul instrument in package npmtest_slm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-slm/lib.npmtest_slm.js":"/* istanbul instrument in package npmtest_slm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_slm = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_slm = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-slm/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-slm && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_slm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_slm\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_slm.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_slm.rollup.js'] =\n            local.assetsDict['/assets.npmtest_slm.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_slm.__dirname + '/lib.npmtest_slm.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-slm/node_modules/slm/lib/slm.js":"var Template = require('./template');\nvar template = new Template(require('./vm_node'));\n\nvar FS = require('fs');\n\nvar slm = template.exports();\n\nmodule.exports = slm;\n\nslm.__express = function(path, options, fn) {\n  FS.readFile(path, 'utf-8', function (err, src) {\n    if (err) {\n      return fn(new Error(err));\n    }\n    var compile = slm.compile;\n    var compileOptions = {};\n    compileOptions.useCache = options.cache;\n    compileOptions.basePath = options.views;\n    compileOptions.filename = path;\n\n    if (!slm.__cache) {\n      slm.__cache = {};\n    }\n\n    try {\n      var compiled = slm.__cache[path];\n\n      if (compiled && options.cache) {\n        return fn(null, compiled(options, compileOptions));\n      }\n\n      compiled = compile(src, compileOptions);\n      var rendered = compiled(options, compileOptions);\n      slm.__cache[path] = compiled;\n      fn(null, rendered);\n    } catch (e) {\n      fn(e, null);\n    }\n  });\n};\n\n/*\n  This allows us to pass ExpressJS some options\n  Note: Should only be used to initialise Slm.\n*/\nslm.expressOpts = function(options) {\n  template = new Template(require('./vm_node'), options);\n  slm = template.exports();\n  return this.__express;\n};\n","/home/travis/build/npmtest/node-npmtest-slm/node_modules/slm/lib/template.js":"var AttrMerge = require('./filters/attr_merge');\nvar AttrRemove = require('./filters/attr_remove');\nvar Brackets = require('./filters/brackets');\nvar CodeAttributes = require('./filters/code_attributes');\nvar ControlFlow = require('./filters/control_flow');\nvar Controls = require('./filters/controls');\nvar Embeddeds = require('./filters/embedded');\nvar Engine = require('./engine');\nvar Escape = require('./filters/escape');\nvar FastHtml = require('./html/fast');\nvar Interpolate = require('./filters/interpolate');\nvar MultiFlattener = require('./filters/multi_flattener');\nvar Parser = require('./parser');\nvar StaticMerger = require('./filters/static_merger');\nvar StringGenerator = require('./generators/string');\n\nfunction Template(VM, options) {\n  options = options || {};\n  options.mergeAttrs = options.mergeAttrs || { 'class': ' ' };\n  options.attrDelims = options.attrDelims || { '(': ')', '[':']' };\n\n  this.VM = VM;\n  this._engine = new Engine();\n  this.Embeddeds = Embeddeds;\n\n  this._embedded = new Embeddeds.Embedded();\n\n  this.registerEmbedded('script',     new Embeddeds.Javascript());\n  this.registerEmbedded('javascript', new Embeddeds.Javascript({typeAttribute: true}));\n  this.registerEmbedded('css',        new Embeddeds.CSS());\n\n  var filters = this._defaultFilters(options);\n  for (var i = 0, il = filters.length; i < il; i++) {\n    this._engine.use(filters[i]);\n  }\n}\n\nvar p = Template.prototype;\n\np._defaultFilters = function(options) {\n  return [\n    new Parser(options.attrDelims),\n    this._embedded,\n    new Interpolate(),\n    new Brackets(),\n    new Controls(),\n    new AttrMerge(options.mergeAttrs),\n    new CodeAttributes(options.mergeAttrs),\n    new AttrRemove(options.mergeAttrs),\n    new FastHtml(options.format),\n    new Escape(),\n    new ControlFlow(),\n    new MultiFlattener(),\n    new StaticMerger(),\n    new StringGenerator()\n  ];\n};\n\np.registerEmbedded = function(name, engine) {\n  this._embedded.register(name, engine);\n};\n\np.registerEmbeddedFunction = function(name, renderer) {\n  var engine = new this.Embeddeds.InterpolateEngine(renderer);\n  this.registerEmbedded(name, engine);\n};\n\np.render = function(src, model, options, vm) {\n  vm = vm || new this.VM();\n  return this.compile(src, options, vm)(model, vm);\n};\n\np.compile = function(src, options, vm) {\n  vm = vm || new this.VM();\n\n  var fn = this.exec(src, options, vm);\n\n  var fnWrap = function(model) {\n    var res = fn.call(model, vm);\n    vm.reset();\n    return res;\n  };\n  return fnWrap;\n};\n\np.exec = function(src, options, vm) {\n  options = options || {};\n\n  if (options.useCache !== undefined && !options.useCache) {\n    vm._load = vm._loadWithoutCache;\n  }\n\n  vm.template = this;\n  vm.basePath = options.basePath;\n  vm.filename = options.filename;\n  vm.require  = options.require || module.require;\n  vm.rebind();\n\n  return vm.runInContext(this.src(src, options), vm.filename)[0];\n};\n\np.src = function(src, options) {\n  return [\n    '[function(vm) {',\n    'vm.m = this;',\n    'var sp = vm.stack.length, require = vm.require, content = vm._content, extend = vm._extend, partial = vm._partial, mixin = vm._mixin, j = vm.j;',\n    this._engine.exec(src, options),\n    'vm.res=_b;return vm.pop(sp);}]'\n  ].join('');\n};\n\np.exports = function() {\n  return {\n    Template: Template,\n    template: this,\n    compile:  this.compile.bind(this),\n    render:   this.render.bind(this)\n  };\n};\n\nmodule.exports = Template;\n","/home/travis/build/npmtest/node-npmtest-slm/node_modules/slm/lib/filters/attr_merge.js":"var Slm = require('./slm');\n\nfunction AttrMerge(mergeAttrs) {\n  this._mergeAttrs = mergeAttrs;\n}\n\nvar p = AttrMerge.prototype = new Slm();\n\np.on_html_attrs = function(exps) {\n  var names = [], values = {};\n  for (var i = 2, l = exps.length; i < l; i++) {\n    var attr = exps[i];\n    var name = attr[2].toString(), val = attr[3];\n    if (values[name]) {\n      if (!this._mergeAttrs[name]) {\n        throw new Error('Multiple ' + name + ' attributes specified');\n      }\n\n      values[name].push(val);\n    } else {\n      values[name] = [val];\n      names.push(name);\n    }\n  }\n\n  names.sort();\n\n  return this._merge(names, values);\n};\n\np._merge = function(names, values) {\n  var attrs = [];\n  for (var i = 0, il = names.length; i < il; i++) {\n    var name = names[i];\n    var value = values[name], delimiter = this._mergeAttrs[name];\n    if (delimiter && value.length > 1) {\n      var all = false, exp = ['multi'];\n      for (var k = 0, kl = value.length; k < kl; k++) {\n        var kv = value[k];\n        all = this._isContainNonEmptyStatic(kv);\n        if (!all) {\n          break;\n        }\n      }\n      if (all) {\n        for (var j = 0, jl = value.length; j < jl; j++) {\n          var jv = value[j];\n          if (j) {\n            exp.push(['static', delimiter]);\n          }\n          exp.push(jv);\n        }\n        attrs[i] = ['html', 'attr', name, exp];\n      } else {\n        var captures = this._uniqueName();\n        exp.push(['code', 'var ' + captures + '=[];']);\n        for (var a = 0, al = value.length; a < al; a++) {\n          exp.push(['capture', captures + '[' + a + ']', captures + '[' + a + ']' + '=\\'\\';', value[a]]);\n        }\n        exp.push(['dynamic', 'vm.rejectEmpty(' + captures + ').join(\"' + delimiter + '\")']);\n        attrs[i] = ['html', 'attr', name, exp];\n      }\n    } else {\n      attrs[i] = ['html', 'attr', name, value[0]];\n    }\n  }\n\n  return ['html', 'attrs'].concat(attrs);\n};\n\nmodule.exports = AttrMerge;\n","/home/travis/build/npmtest/node-npmtest-slm/node_modules/slm/lib/filters/slm.js":"var Filter = require('../html/html');\n\nfunction Slm() {}\nvar p = Slm.prototype = new Filter();\n\n// Pass-through handlers\np.on_slm_text = function(exps) {\n  exps[2] = this.compile(exps[2]);\n  return exps;\n};\n\n//p.on_slm_embedded = function(exps) {\n  //exps[3] = this.compile(exps[3]);\n  //return exps;\n//};\n\np.on_slm_control = function(exps) {\n  exps[3] = this.compile(exps[3]);\n  return exps;\n};\n\np.on_slm_output = function(exps) {\n  exps[4] = this.compile(exps[4]);\n  return exps;\n};\n\nmodule.exports = Slm;\n","/home/travis/build/npmtest/node-npmtest-slm/node_modules/slm/lib/html/html.js":"var Filter = require('../filter');\n\nfunction Html() {}\nvar p = Html.prototype = new Filter();\n\np.on_html_attrs = p._shiftAndCompile;\n\np.on_html_attr = function(exps) {\n  return ['html', 'attr', exps[2], this.compile(exps[3])];\n};\n\np.on_html_comment = function(exps) {\n  return ['html', 'comment', this.compile(exps[2])];\n};\n\np.on_html_condcomment = function(exps) {\n  return ['html', 'condcomment', exps[2], this.compile(exps[3])];\n};\n\np.on_html_tag = function(exps) {\n  var content = exps[4];\n  var res = ['html', 'tag', exps[2], this.compile(exps[3])];\n  if (content) {\n    res.push(this.compile(content));\n  }\n  return res;\n};\n\np._isContainNonEmptyStatic = function(exp) {\n  switch (exp[0]) {\n  case 'multi':\n    for (var i = 1, l = exp.length; i < l; i++) {\n      if (this._isContainNonEmptyStatic(exp[i])) {\n        return true;\n      }\n    }\n    return false;\n  case 'escape':\n    return this._isContainNonEmptyStatic(exp[exp.length - 1]);\n  case 'static':\n    return exp[1].length;\n  default:\n    return false;\n  }\n};\n\nmodule.exports = Html;\n","/home/travis/build/npmtest/node-npmtest-slm/node_modules/slm/lib/filter.js":"var Dispatcher = require('./dispatcher');\n\nfunction Filter() {}\nvar p = Filter.prototype = new Dispatcher();\n\nvar uniqueName = 0;\n\n// Tools\n\np._isEmptyExp = function(exp) {\n  switch (exp[0]) {\n  case 'multi':\n    for (var i = 1, l = exp.length; i < l; i++) {\n      if (!this._isEmptyExp(exp[i])) {\n        return false;\n      }\n    }\n    return true;\n  case 'newline':\n    return true;\n  default:\n    return false;\n  }\n};\n\np._uniqueName = function() {\n  uniqueName++;\n  return '$lm' + uniqueName.toString(16);\n};\n\np._compileEach = function(exps, startIndex) {\n  for (var i = startIndex, l = exps.length; i < l; i++) {\n    exps[i] = this.compile(exps[i]);\n  }\n  return exps;\n};\n\np._shiftAndCompile = function(exps) {\n  return this._compileEach(exps, 2);\n};\n\n// Core\n\np.on_multi = function(exps) {\n  return this._compileEach(exps, 1);\n};\n\np.on_capture = function(exps) {\n  return ['capture', exps[1], exps[2], this.compile(exps[3])];\n};\n\n// Control Flow\n\np.on_if = p._shiftAndCompile;\n\np._shiftAndCompileMulti = function(exps) {\n  var res = ['multi'];\n\n  for (var i = 2, l = exps.length; i < l; i++) {\n    res.push(this.compile(exps[i]));\n  }\n  return res;\n};\n\np.on_switch = function(exps) {\n  for (var i = 2, l = exps.length; i < l; i++) {\n    var exp = exps[i];\n    exps[i] = [exp[0], this.compile(exp[1])];\n  }\n  return exps;\n};\n\np.on_block = function(exps) {\n  return ['block', exps[1], this.compile(exps[2])];\n};\n\n// Escaping\n\np.on_escape = function(exps) {\n  return ['escape', exps[1], this.compile(exps[2])];\n};\n\nmodule.exports = Filter;\n","/home/travis/build/npmtest/node-npmtest-slm/node_modules/slm/lib/dispatcher.js":"var methodSplitRE = /_/;\nvar methodRE = /^on(_\\w+)*$/;\n\nfunction Node() {\n  this._nodes = {};\n}\n\nNode.prototype.compile = function(level, callMethod) {\n  if (this._method) {\n    callMethod = 'this.' + this._method + '(exps)';\n  }\n\n  var code = 'switch(exps[' + level + ']) {';\n  var empty = true;\n\n  for (var key in this._nodes) {\n    empty = false;\n    code += '\\ncase \\'' + key + '\\' : \\n';\n    code +=  this._nodes[key].compile(level + 1, callMethod) + ';';\n  }\n\n  if (empty) {\n    return 'return ' + callMethod;\n  }\n\n  code += '\\ndefault:\\nreturn ' + (callMethod || 'exps') + ';}';\n\n  return code;\n};\n\nfunction Dispatcher() { }\n\nvar DispatcherProto = Dispatcher.prototype;\n\nDispatcherProto.exec = function(exp) {\n  return this.compile(exp);\n};\n\nDispatcherProto.compile = function(exp) {\n  return this._dispatcher(exp);\n};\n\nDispatcherProto._dispatcher = function(exp) {\n  return this._replaceDispatcher(exp);\n};\n\nDispatcherProto._dispatchedMethods = function() {\n  var res = [];\n\n  for (var key in this) {\n    if (methodRE.test(key)) {\n      res.push(key);\n    }\n  }\n  return res;\n};\n\nDispatcherProto._replaceDispatcher = function(exp) {\n  var tree = new Node();\n  var dispatchedMethods = this._dispatchedMethods();\n  for (var i = 0, il = dispatchedMethods.length; i < il; i++) {\n    var method = dispatchedMethods[i], node = tree;\n    var types = method.split(methodSplitRE);\n    for (var j = 1, jl = types.length; j < jl; j++) {\n      var type = types[j];\n      var n = node._nodes[type];\n      node = node._nodes[type] = n || new Node();\n    }\n    node._method = method;\n  }\n  this._dispatcher = new Function('exps', tree.compile(0));\n  return this._dispatcher(exp);\n};\n\nmodule.exports = Dispatcher;\n","/home/travis/build/npmtest/node-npmtest-slm/node_modules/slm/lib/filters/attr_remove.js":"var Slm = require('./slm');\n\nfunction AttrRemove(removeEmptyAttrs) {\n  this._removeEmptyAttrs = removeEmptyAttrs;\n}\n\nAttrRemove.prototype = new Slm();\n\nAttrRemove.prototype.on_html_attr = function(exps) {\n  var name = exps[2], value = exps[3];\n  if (this._removeEmptyAttrs[name.toString()] === undefined) {\n    return Slm.prototype.on_html_attr.call(this, exps);\n  }\n\n  if (this._isContainNonEmptyStatic(value)) {\n    return ['html', 'attr', name, value];\n  }\n\n  var tmp = this._uniqueName();\n  return [\n    'multi',\n      ['capture', tmp, 'var ' + tmp + '=\\'\\';', this.compile(value)],\n      ['if', tmp + '.length',\n        ['html', 'attr', name, ['dynamic', tmp]]\n      ]\n  ];\n};\n\nmodule.exports = AttrRemove;\n","/home/travis/build/npmtest/node-npmtest-slm/node_modules/slm/lib/filters/brackets.js":"var Slm = require('./slm');\n\nvar blockRe = /^(case|default)\\b/;\nvar wrapCondRe = /^(for|switch|catch|while|if|else\\s+if)\\s+(?!\\()((\\S|\\s\\S)*)\\s*$/;\nvar ifRe = /^(if|switch|while|for|else|finally|catch)\\b/;\nvar callbackRe = /(function\\s*\\([^\\)]*\\)\\s*)[^\\{]/;\n\nfunction Brackets() {}\n\nvar p = Brackets.prototype = new Slm();\n\np.on_slm_control = function(exps) {\n  var code = exps[2], content = exps[3], m;\n\n  m = wrapCondRe.exec(code);\n  if (m) {\n    code = code.replace(m[2], '(' + m[2] + ')');\n  }\n\n  code = this._expandCallback(code, content);\n  return ['slm', 'control', code, this.compile(content)];\n};\n\np.on_slm_output = function(exps) {\n  var code = exps[3], content = exps[4];\n  code = this._expandCallback(code, content);\n  return ['slm', 'output', exps[2], code, this.compile(content)];\n};\n\np._expandCode = function(code, postCode) {\n    var index, m = callbackRe.exec(code);\n    if (m) {\n      index = m.index + m[1].length;\n      postCode += code.slice(index);\n      code = code.slice(0, index);\n    } else if ((index = code.lastIndexOf(')')) !== -1) {\n      var firstIndex = code.indexOf('(');\n      if (firstIndex === -1) {\n        throw new Error('Missing open brace \"(\" in `' + code + '`');\n      }\n      var args = code.slice(firstIndex + 1, index);\n      postCode += code.slice(index);\n      code = code.slice(0, index);\n      if (!/^\\s*$/.test(args)) {\n         code += ',';\n      }\n      code += 'function()';\n    }\n\n    return [code, postCode];\n};\n\np._expandCallback = function(code, content) {\n  if (blockRe.test(code) || this._isEmptyExp(content)) {\n    return code;\n  }\n\n  var postCode = '}';\n\n  if (!ifRe.test(code)) {\n    var parts = this._expandCode(code, postCode);\n    code = parts[0];\n    postCode = parts[1];\n  }\n  code += '{';\n  content.push(['code', postCode]);\n  return code;\n};\n\nmodule.exports = Brackets;\n","/home/travis/build/npmtest/node-npmtest-slm/node_modules/slm/lib/filters/code_attributes.js":"var Slm = require('./slm');\n\nfunction CodeAttributes(mergeAttrs) {\n  //this._attr = null;\n  this._mergeAttrs = mergeAttrs;\n}\n\nvar p = CodeAttributes.prototype = new Slm();\n\np.on_html_attrs = p._shiftAndCompileMulti;\n\np.on_html_attr = function(exps) {\n  var name = exps[2], value = exps[3];\n  if (value[0] === 'slm' && value[1] === 'attrvalue' && !this._mergeAttrs[name]) {\n    // We handle the attribute as a boolean attribute\n    var escape = value[2], code = value[3];\n    switch (code) {\n    case 'true':\n      return ['html', 'attr', name, ['multi']];\n    case 'false':\n    case 'null':\n    case 'undefined':\n      return ['multi'];\n    default:\n      var tmp = this._uniqueName();\n      return ['multi',\n       ['code', 'var ' + tmp + '=' + code],\n       ['switch', tmp,\n        ['true', ['multi',\n          ['html', 'attr', name, ['multi']],\n          ['code', 'break']]],\n        ['false', ['multi']],\n        ['undefined', ['multi']],\n        ['null', ['code', 'break']],\n        ['default', ['html', 'attr', name, ['escape', escape, ['dynamic', tmp]]]]]];\n    }\n  } else {\n    // Attribute with merging\n    this._attr = name;\n    return Slm.prototype.on_html_attr.call(this, exps);\n  }\n};\n\np.on_slm_attrvalue = function(exps) {\n  var escape = exps[2], code = exps[3];\n  // We perform attribute merging on Array values\n  var delimiter = this._mergeAttrs[this._attr];\n  if (delimiter) {\n    var tmp = this._uniqueName();\n    return ['multi',\n     ['code', 'var ' + tmp + '=' + code + ';'],\n     ['if', tmp + ' instanceof Array',\n      ['multi',\n        ['code',  tmp + '=vm.rejectEmpty(vm.flatten(' + tmp + '));'],\n       ['escape', escape, ['dynamic', tmp + '.join(\"' + delimiter + '\")']]],\n      ['escape', escape, ['dynamic', tmp]]]];\n  }\n  return ['escape', escape, ['dynamic', code]];\n};\n\nmodule.exports = CodeAttributes;\n","/home/travis/build/npmtest/node-npmtest-slm/node_modules/slm/lib/filters/control_flow.js":"var Slm = require('./slm');\n\nfunction ControlFlow() {}\n\nvar p = ControlFlow.prototype = new Slm();\n\np.on_switch = function(exps) {\n  var arg = exps[1], res = ['multi', ['code', 'switch(' + arg + '){']];\n\n  for (var i = 2, l = exps.length; i < l; i++) {\n    var exp = exps[i];\n    res.push(['code', exp[0] === 'default' ? 'default:' : 'case ' + exp[0] + ':']);\n    res.push(this.compile(exp[1]));\n  }\n\n  res.push(['code', '}']);\n  return res;\n};\n\np.on_if = function(exps) {\n  var condition = exps[1], yes = exps[2], no = exps[3];\n\n  var result = ['multi', ['code', 'if(' + condition + '){'], this.compile(yes)];\n  if (no) {\n    result.push(['code', '}else{']);\n    result.push(this.compile(no));\n  }\n  result.push(['code', '}']);\n  return result;\n};\n\np.on_block = function(exps) {\n  var code = exps[1], exp = exps[2];\n  return ['multi', ['code', code], this.compile(exp)];\n};\n\nmodule.exports = ControlFlow;\n","/home/travis/build/npmtest/node-npmtest-slm/node_modules/slm/lib/filters/controls.js":"var Slm = require('./slm');\n\nvar ifRe = /^(if)\\b|{\\s*$/;\n\nfunction Control() {}\n\nvar p = Control.prototype = new Slm();\n\np.on_slm_control = function(exps) {\n  return ['multi', ['code', exps[2]], this.compile(exps[3])];\n};\n\np.on_slm_output = function(exps) {\n  var escape = exps[2], code = exps[3], content = exps[4];\n  if (ifRe.test(code)) {\n    var tmp = this._uniqueName(), tmp2 = this._uniqueName();\n    content = this.compile(content);\n    content.splice(content.length - 1, 0, ['code', 'return vm.safe(' + tmp2 + ');']);\n    return ['multi',\n      // Capture the result of the code in a variable. We can't do\n      // `[dynamic, code]` because it's probably not a complete\n      // expression (which is a requirement for Temple).\n      ['block', 'var ' + tmp + '=' + code,\n\n        // Capture the content of a block in a separate buffer. This means\n        // that `yield` will not output the content to the current buffer,\n        // but rather return the output.\n        //\n        // The capturing can be disabled with the option :disable_capture.\n        // Output code in the block writes directly to the output buffer then.\n        // Rails handles this by replacing the output buffer for helpers.\n        // options[:disable_capture] ? compile(content) : [:capture, unique_name, compile(content)]],\n        ['capture', tmp2, 'var ' + tmp2 + '=\\'\\';', content]],\n\n       // Output the content.\n      ['escape', 'escape', ['dynamic', tmp]]\n    ];\n  }\n  return ['multi', ['escape', escape, ['dynamic', code]], content];\n};\n\np.on_slm_text = function(exps) {\n  return this.compile(exps[2]);\n};\n\nmodule.exports = Control;\n","/home/travis/build/npmtest/node-npmtest-slm/node_modules/slm/lib/filters/embedded.js":"var Slm = require('./slm');\n\nfunction TextCollector() {}\nvar TextProto = TextCollector.prototype = new Slm();\n\nTextProto.exec = function(exp) {\n  this._collected = '';\n  Slm.prototype.exec.call(this, exp);\n  return this._collected;\n};\n\nTextProto.on_slm_interpolate = function(exps) {\n  this._collected += exps[2];\n};\n\nfunction Engine() {\n  this._textCollector = new TextCollector();\n}\nvar EngineProto = Engine.prototype = new Slm();\n\nEngineProto.collectText = function(body) {\n  return this._textCollector.exec(body);\n};\n\nfunction Javascript(options) {\n  this._withType = options && options.typeAttribute;\n}\nJavascript.prototype = new Engine();\n\nJavascript.prototype.on_slm_embedded = function(exps) {\n  var body = exps[3];\n  if (this._withType) {\n    return ['html', 'tag', 'script',['html', 'attrs',\n      ['html', 'attr', 'type', ['static', 'text/javascript']]], body];\n  }\n  return ['html', 'tag', 'script', ['html', 'attrs'], body];\n};\n\nfunction CSS() {}\nCSS.prototype = new Engine();\n\nCSS.prototype.on_slm_embedded = function(exps) {\n  var body = exps[3];\n  return ['html', 'tag', 'style', ['html', 'attrs',\n    ['html', 'attr', 'type', ['static', 'text/css']]], body];\n};\n\nfunction Embedded() {\n  this._engines = {};\n}\n\nvar EmbeddedProto = Embedded.prototype = new Slm();\n\nEmbeddedProto.register = function(name, filter) {\n  this._engines[name] = filter;\n};\n\nEmbeddedProto.on_slm_embedded = function(exps) {\n  var name = exps[2];\n  var engine = this._engines[name];\n  if (!engine) {\n    throw new Error('Embedded engine ' + name + ' is not registered.');\n  }\n  return this._engines[name].on_slm_embedded(exps);\n};\n\nvar InterpolateEngine = function(renderer) {\n  this.renderer = renderer;\n};\n\nvar InterpolateProto = InterpolateEngine.prototype = new Engine();\n\nInterpolateProto.on_slm_embedded = function(exps) {\n  var body = exps[3];\n  var text = this.collectText(body);\n  return ['multi', ['slm', 'interpolate', this.renderer(text)]];\n};\n\nmodule.exports = {\n  Embedded: Embedded,\n  Javascript: Javascript,\n  CSS: CSS,\n  TextCollector: TextCollector,\n  InterpolateEngine: InterpolateEngine\n};\n","/home/travis/build/npmtest/node-npmtest-slm/node_modules/slm/lib/engine.js":"function Engine() {\n  this._chain = [];\n}\n\nvar p = Engine.prototype;\n\np.use = function(filter) {\n  this._chain.push(filter);\n};\n\np.exec = function(src, options) {\n  var res = src;\n  for (var i = 0, li = this._chain.length; i < li; i++) {\n    res = this._chain[i].exec(res, options);\n  }\n\n  return res;\n};\n\nmodule.exports = Engine;\n","/home/travis/build/npmtest/node-npmtest-slm/node_modules/slm/lib/filters/escape.js":"var Filter = require('../filter');\nvar VM = require('../vm');\n\nfunction Escape() {\n  this._disableEscape = false;\n  this._escape = false;\n  this._escaper = VM.escape;\n}\n\nvar p = Escape.prototype = new Filter();\n\np._escapeCode = function(v) {\n  return 'vm.escape(' + v.replace(/;+$/, '') + ')';\n};\n\np.on_escape = function(exps) {\n  var old = this.escape;\n  this._escape = exps[1] && !this._disableEscape;\n  try {\n    return this.compile(exps[2]);\n  } finally {\n    this._escape = old;\n  }\n};\n\np.on_static = function(exps) {\n  return ['static', this._escape ? this._escaper(exps[1]) : exps[1]];\n};\n\np.on_dynamic = function(exps) {\n  return ['dynamic', this._escape ? this._escapeCode(exps[1]) : exps[1]];\n};\n\nmodule.exports = Escape;\n","/home/travis/build/npmtest/node-npmtest-slm/node_modules/slm/lib/vm.js":"var ampRe = /&/g;\nvar escapeRe = /[&<>\"]/;\nvar gtRe = />/g;\nvar ltRe = /</g;\nvar quotRe = /\"/g;\n\nfunction SafeStr(val) {\n  this.htmlSafe = true;\n  this._val = val;\n}\n\nSafeStr.prototype.toString = function() {\n  return this._val;\n};\n\nfunction safe(val) {\n  if (!val || val.htmlSafe) {\n    return val;\n  }\n\n  return new SafeStr(val);\n}\n\nfunction j(val) {\n  var str = JSON.stringify(val) + '';\n  return str.replace(/<\\//g, \"<\\\\/\");\n}\n\nfunction escape(str) {\n  if (typeof str !== 'string') {\n    if (!str) {\n      return '';\n    }\n    if (str.htmlSafe) {\n      return str.toString();\n    }\n    str = str.toString();\n  }\n\n  if (escapeRe.test(str)) {\n    if (str.indexOf('&') !== -1) {\n      str = str.replace(ampRe, '&amp;');\n    }\n    if (str.indexOf('<') !== -1) {\n      str = str.replace(ltRe, '&lt;');\n    }\n    if (str.indexOf('>') !== -1) {\n      str = str.replace(gtRe, '&gt;');\n    }\n    if (str.indexOf('\"') !== -1) {\n      str = str.replace(quotRe, '&quot;');\n    }\n  }\n\n  return str;\n}\n\nfunction rejectEmpty(arr) {\n  var res = [];\n\n  for (var i = 0, l = arr.length; i < l; i++) {\n    var el = arr[i];\n    if (el !== null && el.length) {\n      res.push(el);\n    }\n  }\n\n  return res;\n}\n\nfunction flatten(arr) {\n  return arr.reduce(function(acc, val) {\n    if (val === null) {\n      return acc;\n    }\n    // TODO: investigate why test fails with this line\n    // return acc.concat(val.constructor === Array ? flatten(val) : val.toString());\n    return acc.concat(Array.isArray(val) ? flatten(val) : val.toString());\n  }, []);\n}\n\nVM._cache = {};\n\nfunction VM() {\n  this.reset();\n  this.template = this.basePath = null;\n  this._cache = VM._cache;\n}\n\nvar VMProto = VM.prototype;\n\nVM.escape = VMProto.escape = escape;\nVM.safe = VMProto.safe = safe;\nVMProto.j = j;\nVMProto.flatten = flatten;\nVMProto.rejectEmpty = rejectEmpty;\n\nVMProto.resetCache = function() {\n  this._cache = VM._cache = {};\n};\n\nVMProto.cache = function(name, value) {\n  this._cache[name] = value;\n};\n\nVMProto.rebind = function() {\n  this._content = this.content.bind(this);\n  this._extend = this.extend.bind(this);\n  this._partial = this.partial.bind(this);\n  this._mixin = this.mixin.bind(this);\n};\n\nVMProto._loadWithCache = function(path) {\n  var fn = this._cache[path];\n  if (fn) {\n    return fn;\n  }\n\n  var result = this._cache[path] = this._loadWithoutCache(path);\n  return result;\n};\n\nVMProto._load = VMProto._loadWithCache;\n\n/*\n  Prepare VM for next template rendering\n*/\nVMProto.reset = function() {\n  this._contents = {};\n  this._mixins = {};\n  this.res = '';\n  this.stack = [];\n  this.m = null;\n};\n\n/*\n  Pop stack to sp\n*/\nVMProto.pop = function(sp) {\n  var currentFilename = this.filename;\n  var l = this.stack.length;\n  while (sp < l--) {\n    this.filename = this.stack.pop();\n    this._load(this.filename).call(this.m, this);\n  }\n  this.filename = currentFilename;\n  return this.res;\n};\n\nVMProto.extend = function(path) {\n  this.stack.push(this._resolvePath(path));\n};\n\nVMProto.partial = function(path, model, cb) {\n  var stashedResult = this.res;\n  if (cb) {\n    this.res = cb.call(this.m, this);\n  }\n\n  if (model === undefined) {\n    model = this.m;\n  }\n\n  path = this._resolvePath(path);\n\n  var f = this._load(path), stashedFilename = this.filename, stashedModel = this.m;\n  this.filename = path;\n  var res = safe(f.call(this.m = model, this));\n  this.m = stashedModel;\n  this.filename = stashedFilename;\n  this.res = stashedResult;\n  return res;\n};\n\nVMProto.content = function() {\n  var cb, mod, name;\n  switch (arguments.length) {\n    case 0: // return main content\n      return safe(this.res);\n    case 1: // return named content\n      return safe(this._contents[arguments[0]] || '');\n    case 2: // capture named content\n      name = arguments[0];\n      cb = arguments[1];\n      if (name) {\n        // capturing block\n        this._contents[name] = cb.call(this.m);\n        return '';\n      }\n      return cb.call(this.m);\n    case 3: // content operations: default, append, prepend\n      name = arguments[0];\n      mod = arguments[1];\n      cb = arguments[2];\n      var contents = this._contents[name] || '';\n      switch (mod) {\n        case 'default':\n          return safe(contents || cb.call(this.m));\n        case 'append':\n          this._contents[name] = contents + cb.call(this.m);\n          return '';\n        case 'prepend':\n          this._contents[name] = cb.call(this.m) + contents;\n          return '';\n      }\n  }\n};\n\nVMProto.mixin = function() {\n  var name = arguments[0];\n\n  var lastArgument = arguments[arguments.length - 1];\n  if (typeof lastArgument === 'function') { // mixin definition\n    var cb = lastArgument;\n\n    // make Mixin parameters from definition\n    var args = [];\n    for (var i = 1; i < arguments.length - 1; i++) {\n      var param = arguments[i];\n      var defaultValue = null;\n\n      // check the default value [= mixin(\"name\", \"a=1\", \"b = 2\", \"c\")]\n      var m = param.match(/([^\\=\\s]*)\\s*\\=\\s*(.*)/);\n      if (m) {\n        param = m[1];\n        defaultValue = m[2];\n      }\n\n      args.push({\n        name: param,\n        value: defaultValue\n      });\n    }\n\n    if (name) {\n      this._mixins[name] = {\n        arguments: args,\n        body: cb\n      };\n      return '';\n    }\n    return '';\n  }\n\n  // mixin reference\n  var referenceParams = [];\n  for (var i = 1; i < arguments.length; i++) {\n    referenceParams.push(arguments[i]);\n  }\n\n  // try to find mixin\n  var mixin = null;\n  for (var item in this._mixins) {\n    // Check Mixin name\n    if (item === name) {\n      var maybeMixin = this._mixins[item];\n\n      // check balance of arguments. If Mixin has free parameters without default values then skip this Mixin\n      var paramsLength = maybeMixin.arguments.length;\n      var mixinStatus = true;\n      for (var i = referenceParams.length; i < maybeMixin.arguments.length; i++) {\n        var param = maybeMixin.arguments[i];\n\n        if (!param.value) {\n          mixinStatus = false;\n          break;\n        }\n      }\n\n      if (mixinStatus) {\n        mixin = maybeMixin;\n        break;\n      }\n    }\n  }\n\n  if (!mixin) {\n    return '';\n  }\n\n  // add default values\n  var mixinParams = mixin.arguments;\n  if (referenceParams.length !== mixinParams.length) {\n    for (var i = referenceParams.length; i < mixinParams.length; i++) {\n      if (mixinParams[i]) {\n        referenceParams.push(mixinParams[i].value);\n      }\n    }\n  }\n\n  // convert Array to Object\n  var params = {};\n  for (var i = 0; i < referenceParams.length; i++) {\n    params[mixinParams[i].name] = referenceParams[i];\n  }\n\n  // merge Mixin params with context\n  if (this.m) {\n    for (var item in this.m) {\n      params[item] = this.m[item];\n    }\n  }\n\n  return mixin.body.call(params);\n}\n\nmodule.exports = VM;\n","/home/travis/build/npmtest/node-npmtest-slm/node_modules/slm/lib/html/fast.js":"var Html = require('./html');\n\nfunction Fast(format) {\n  // See http://www.w3.org/html/wg/drafts/html/master/single-page.html#void-elements\n  this._autoclose  = 'area base br col embed hr img input keygen link menuitem meta param source track wbr'.split(/\\s/);\n  this._format = format || 'xhtml';\n  this._attrQuote = '\"';\n  this._jsWrapper = ['\\n//<![CDATA[\\n', '\\n//]]>\\n'];\n}\n\nvar p = Fast.prototype = new Html();\n\np.on_html_doctype = function(exps) {\n  var type = exps[2];\n\n  var html = '<!DOCTYPE html>';\n\n  var DOCTYPES = {\n    xml: {\n      '1.1'          : '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">',\n      '5'            : html,\n      'html'         : html,\n      'basic'        : '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\" \"http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd\">',\n      'frameset'     : '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">',\n      'strict'       : '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">',\n      'svg'          : '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">',\n      'transitional' : '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">'\n    },\n    html: {\n      '5'            : html,\n      'html'         : html,\n      'frameset'     : '<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Frameset//EN\" \"http://www.w3.org/TR/html4/frameset.dtd\">',\n      'strict'       : '<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">',\n      'transitional' : '<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">'\n    }\n  };\n\n  DOCTYPES.xhtml = DOCTYPES.xml;\n\n  type = type.toString().toLowerCase();\n  var m, str;\n\n  m = /^xml(\\s+(.+))?$/.exec(type);\n  if (m) {\n    if (this._format === 'html') {\n      throw new Error('Invalid xml directive in html mode');\n    }\n    var w = this._attrQuote;\n    str = '<?xml version=' + w + '1.0' + w + ' encoding=' + w + (m[2] || 'utf-8') + w + ' ?>';\n  } else {\n    str = DOCTYPES[this._format][type];\n    if (!str) {\n      throw new Error('Invalid doctype ' + type);\n    }\n  }\n\n  return ['static', str];\n};\n\np.on_html_comment = function(exps) {\n  return ['multi', ['static', '<!--'], this.compile(exps[2]), ['static', '-->']];\n};\n\np.on_html_condcomment = function(exps) {\n  return this.on_html_comment(['html', 'comment', [\n    'multi',\n      ['static', '[' + exps[2] + ']>'], exps[3], ['static', '<![endif]']]]);\n};\n\np.on_html_tag = function(exps) {\n  var name = exps[2].toString(), attrs = exps[3], content = exps[4];\n\n  var closed = !content || (this._isEmptyExp(content) && (this._format === 'xml' || this._autoclose.indexOf(name) !== -1));\n\n  var res = [\n    'multi',\n      ['static', '<' + name],\n      this.compile(attrs),\n      ['static', (closed && this._format !== 'html' ? ' /' : '') + '>']\n    ];\n\n  if (content) {\n    res.push(this.compile(content));\n  }\n  if (!closed) {\n    res.push(['static', '</' + name + '>']);\n  }\n  return res;\n};\n\np.on_html_attrs = p._shiftAndCompileMulti;\n\np.on_html_attr = function(exps) {\n  var name = exps[2], value = exps[3];\n\n  if (this._format === 'html' && this._isEmptyExp(value)) {\n    return ['static', ' ' + name];\n  }\n  return ['multi',\n    ['static', ' ' + name + '=' + this._attrQuote],\n    this.compile(value),\n    ['static', this._attrQuote]];\n};\n\np.on_html_js = function(exps) {\n  var content = exps[2];\n\n  return ['multi',\n     ['static', this._jsWrapper[0]],\n     this.compile(content),\n     ['static', this._jsWrapper[1]]];\n};\n\nmodule.exports = Fast;\n","/home/travis/build/npmtest/node-npmtest-slm/node_modules/slm/lib/filters/interpolate.js":"var Slm = require('./slm');\n\nvar escapedInterpolationRe = /^\\\\\\$\\{/;\nvar interpolationRe = /^\\$\\{/;\nvar staticTextRe = /^([\\$\\\\]?[^\\$\\\\]*([\\$\\\\][^\\\\\\$\\{][^\\$\\\\]*)*)/;\n\nfunction Interpolate() {}\n\nvar p = Interpolate.prototype = new Slm();\n\np.on_slm_interpolate = function(exps) {\n  var str = exps[2], m, code;\n\n  // Interpolate variables in text (${variable}).\n  // Split the text into multiple dynamic and static parts.\n  var block = ['multi'];\n  do {\n    // Escaped interpolation\n    m = escapedInterpolationRe.exec(str);\n    if (m) {\n      block.push(['static', '${']);\n      str = str.slice(m[0].length);\n      continue;\n    }\n    m = interpolationRe.exec(str);\n    if (m) {\n      // Interpolation\n      var res = this._parseExpression(str.slice(m[0].length));\n      str = res[0];\n      code = res[1];\n      var escape = code[0] !== '=';\n      block.push(['slm', 'output', escape, escape ? code : code.slice(1), ['multi']]);\n    } else {\n      m = staticTextRe.exec(str);\n      // static text\n      block.push(['static', m[0]]);\n      str = str.slice(m[0].length);\n    }\n  } while (str.length);\n\n  return block;\n};\n\np._parseExpression = function(str) {\n  for (var count = 1, i = 0, l = str.length; i < l && count; i++) {\n    if (str[i] === '{') {\n      count++;\n    } else if (str[i] === '}') {\n      count--;\n    }\n  }\n\n  if (count) {\n    throw new Error('Text interpolation: Expected closing }');\n  }\n\n  return [str.slice(i), str.substring(0, i - 1)];\n};\n\nmodule.exports = Interpolate;\n","/home/travis/build/npmtest/node-npmtest-slm/node_modules/slm/lib/filters/multi_flattener.js":"var Filter = require('../filter');\n\n// Flattens nested multi expressions\n\nfunction MultiFlattener() {}\nMultiFlattener.prototype = new Filter();\n\nMultiFlattener.prototype.on_multi = function(exps) {\n  // If the multi contains a single element, just return the element\n  var len = exps.length;\n  if (len === 2) {\n    return this.compile(exps[1]);\n  }\n\n  var res = ['multi'];\n\n  for (var i = 1; i < len; i++) {\n    var exp = exps[i];\n    exp = this.compile(exp);\n    if (exp[0] === 'multi') {\n      for (var j = 1, l = exp.length; j < l; j++) {\n        res.push(exp[j]);\n      }\n    } else {\n      res.push(exp);\n    }\n  }\n\n  return res;\n};\n\nmodule.exports = MultiFlattener;\n","/home/travis/build/npmtest/node-npmtest-slm/node_modules/slm/lib/parser.js":"var attrDelimRe = /^\\s*([\\(\\)\\[\\]])/;\nvar blockExpressionRe = /^\\s*:\\s*/;\nvar closedTagRe = /^\\s*\\/\\s*/;\nvar delimRe = /^[\\(\\[]/;\nvar doctypeRe = /^doctype\\b/i;\nvar embededRe = /^(\\w+):\\s*$/;\nvar emptyLineRe = /^\\s*$/;\nvar htmlCommentRe = /^\\/!(\\s?)/;\nvar htmlConditionalCommentRe = /^\\/\\[\\s*(.*?)\\s*\\]\\s*$/;\nvar indentRegex  = /^[ \\t]+/;\nvar indentationRe = /^\\s+/;\nvar newLineRe = /\\r?\\n/;\nvar nextLineRe = /[,\\\\]$/;\nvar outputBlockRe = /^=(=?)([<>]*)/;\nvar outputCodeRe  = /^\\s*=(=?)([<>]*)/;\nvar tabRe = /\\t/g;\nvar textBlockRe = /^((\\.)(\\s|$))|^((\\|)(\\s?))/;\nvar textContentRe = /^( ?)(.*)$/;\n\nvar tagRe = /^(?:#|\\.|\\*(?=[^\\s]+)|(\\w+(?:\\w+|:|-)*\\w|\\w+))/;\nvar attrShortcutRe = /^([\\.#]+)((?:\\w+|-)*)/;\n\nvar tagShortcut = {\n  '.': 'div',\n  '#': 'div'\n};\n\nvar attrShortcut = {\n  '#': ['id'],\n  '.': ['class']\n};\n\nfunction Parser(attrDelims) {\n  this._attrDelims = attrDelims || { '(': ')', '[': ']' };\n\n  var attrDelimsStr = '';\n\n  for (var key in this._attrDelims) {\n    attrDelimsStr += key +  this._attrDelims[key];\n  }\n  attrDelimsStr = this._escapeRegExp(attrDelimsStr)\n\n  this._attrName = '^\\\\s*((?!\\\\${)[^\\\\0\\\\\"\\'><\\\\/=\\\\s#' + attrDelimsStr+ ']+)';\n  this._quotedAttrRe = new RegExp(this._attrName + '\\\\s*=(=?)\\\\s*(\"|\\')');\n  this._codeAttrRe = new RegExp(this._attrName + '\\\\s*=(=?)\\\\s*');\n}\n\nvar p = Parser.prototype;\n\np._escapeRegExp = function(str) {\n  if (!str) {\n    return '';\n  }\n  return str.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n};\n\np._reset = function(lines, stacks) {\n  // Since you can indent however you like in Slm, we need to keep a list\n  // of how deeply indented you are. For instance, in a template like this:\n  //\n  //   doctype       # 0 spaces\n  //   html          # 0 spaces\n  //    head         # 1 space\n  //       title     # 4 spaces\n  //\n  // indents will then contain [0, 1, 4] (when it's processing the last line.)\n\n  // We uses this information to figure out how many steps we must \"jump\"\n  // out when we see an de-indented line.\n  this._indents = [];\n\n  //  Whenever we want to output something, we'll *always* output it to the\n  //  last stack in this array. So when there's a line that expects\n  //  indentation, we simply push a new stack onto this array. When it\n  //  processes the next line, the content will then be outputted into that\n  //  stack.\n  this._stacks = stacks || [];\n\n  this._lineno = 0;\n  this._lines = lines;\n  this._line = this._origLine = null;\n\n  this._indents._last = this._stacks._last = function() {\n    return this[this.length - 1];\n  };\n};\n\np._pushOnTop = function(item) {\n  this._stacks._last().push(item);\n};\n\np._sliceLine = function(beginSlice) {\n  this._line = this._line.slice(beginSlice);\n};\n\np._nextLine = function() {\n  if (this._lines.length) {\n    this._origLine = this._lines.shift();\n    this._lineno++;\n    this._line = this._origLine;\n  } else {\n    this._origLine = this._line = null;\n  }\n\n  return this._line;\n};\n\np._getIndent = function(line) {\n  // Figure out the indentation. Kinda ugly/slow way to support tabs,\n  // but remember that this is only done at parsing time.\n  var m = line.match(indentRegex);\n  return m ? m[0].replace(tabRe, ' ').length : 0;\n};\n\np.exec = function(str, options) {\n  if (options && options.filename) {\n    this._file = options.filename;\n  } else {\n    this._file = null;\n  }\n  var res = ['multi'];\n  this._reset(str.split(newLineRe), [res]);\n\n  while (this._nextLine() !== null) {\n    this._parseLine();\n  }\n\n  this._reset();\n\n  return res;\n};\n\np._parseLine = function() {\n  if (emptyLineRe.test(this._line)) {\n    this._pushOnTop(['newline']);\n    return;\n  }\n\n  var indent = this._getIndent(this._line);\n\n  // Choose first indentation yourself\n  if (!this._indents.length) {\n    this._indents.push(indent);\n  }\n\n  // Remove the indentation\n  this._line = this._line.replace(indentationRe, '');\n\n  // If there's more stacks than indents, it means that the previous\n  // line is expecting this line to be indented.\n  var expectingIndentation = this._stacks.length > this._indents.length;\n\n  if (indent > this._indents._last()) {\n    // This line was actually indented, so we'll have to check if it was\n    // supposed to be indented or not.\n\n    if (!expectingIndentation) {\n      this._syntaxError('Unexpected indentation');\n    }\n\n    this._indents.push(indent);\n  } else {\n    // This line was *not* indented more than the line before,\n    // so we'll just forget about the stack that the previous line pushed.\n    if (expectingIndentation) {\n      this._stacks.pop();\n    }\n\n    // This line was deindented.\n    // Now we're have to go through the all the indents and figure out\n    // how many levels we've deindented.\n    while (indent < this._indents._last() && this._indents.length > 1) {\n      this._indents.pop();\n      this._stacks.pop();\n    }\n\n    // This line's indentation happens lie \"between\" two other line's\n    // indentation:\n    //\n    //   hello\n    //       world\n    //     this      # <- This should not be possible!\n\n    if (indent !== this._indents._last()) {\n      this._syntaxError('Malformed indentation');\n    }\n  }\n\n  this._parseLineIndicators();\n};\n\nvar _parseHtmlComment = function(parser, m) {\n  parser._pushOnTop(['html', 'comment',\n    [\n      'slm', 'text',\n      parser._parseTextBlock(parser._line.slice(m[0].length),\n      parser._indents._last() + m[1].length + 2)\n    ]\n  ]);\n};\n\nvar _parseHtmlConditionalComment = function(parser, m) {\n  var block = ['multi'];\n  parser._pushOnTop(['html', 'condcomment', m[1], block]);\n  parser._stacks.push(block);\n};\n\nvar _parseTextBlock = function(parser, m) {\n  var char, space;\n  if (m[2] === undefined) {\n    char = m[5];\n    space = m[6];\n  } else {\n    char = m[2];\n    space = m[3];\n  }\n  var trailingWS = char === '.';\n\n  parser._pushOnTop([\n    'slm', 'text',\n    parser._parseTextBlock(parser._line.slice(m[0].length),\n    parser._indents._last() + space.length + 1)\n  ]);\n\n  if (trailingWS) {\n    parser._pushOnTop(['static', ' ']);\n  }\n};\n\nvar _parseOutputBlock = function(parser, m) {\n  // We expect the line to be broken or the next line to be indented.\n  parser._sliceLine(m[0].length);\n\n  var trailingWS = m[2].indexOf('>') !== -1;\n  var block = ['multi'];\n  if (m[2].indexOf('<') !== -1) {\n    parser._pushOnTop(['static', ' ']);\n  }\n  parser._pushOnTop(['slm', 'output', m[1].length === 0, parser._parseBrokenLine(), block]);\n  if (trailingWS) {\n    parser._pushOnTop(['static', ' ']);\n  }\n  parser._stacks.push(block);\n};\n\nvar _parseEmbeded = function(parser, m) {\n  // It is treated as block.\n  parser._pushOnTop(['slm', 'embedded', m[1], parser._parseTextBlock()]);\n};\n\n\nvar _parseCommentBlock = function(parser) {\n  while (parser._lines.length) {\n    if (!emptyLineRe.test(parser._lines[0])) {\n      var indent = parser._getIndent(parser._lines[0]);\n      if (indent <= parser._indents._last()) {\n        break;\n      }\n    }\n\n    parser._nextLine();\n    parser._pushOnTop(['newline']);\n  }\n};\n\nvar _parseInlineHtml = function(parser) {\n  var block = ['multi'];\n  parser._pushOnTop(['multi', ['slm', 'interpolate', parser._line], block]);\n  parser._stacks.push(block);\n};\n\nvar _parseCodeBlock = function(parser) {\n  // We expect the line to be broken or the next line to be indented.\n  parser._sliceLine(1);\n  var block = ['multi'];\n  parser._pushOnTop(['slm', 'control', parser._parseBrokenLine(), block]);\n  parser._stacks.push(block);\n};\n\nvar _parseDoctype = function(parser, m) {\n  var value = parser._line.slice(m[0].length).trim();\n  parser._pushOnTop(['html', 'doctype', value]);\n};\n\nvar _parseTag = function(parser, m) {\n  if (m[1]) {\n    parser._sliceLine(m[0].length);\n  }\n  parser._parseTag(m[0]);\n};\n\np._matchLineThen = function(regex, next) {\n  var m = regex.exec(this._line);\n  if (m) {\n    next(this, m);\n    return true;\n  }\n  return false;\n};\n\np._ifTrueThen = function(condition, next) {\n  if (condition) {\n    next(this);\n    return true;\n  }\n\n  return false;\n};\n\np._parseLineIndicators = function() {\n  for (;;) {\n    var firstChar = this._line[0];\n\n    if (\n      // HTML comment\n      this._matchLineThen(htmlCommentRe, _parseHtmlComment) ||\n      // or HTML conditional comment\n      this._matchLineThen(htmlConditionalCommentRe, _parseHtmlConditionalComment) ||\n      // Slm comment\n      this._ifTrueThen(firstChar === '/', _parseCommentBlock) ||\n      // Text block.\n      this._matchLineThen(textBlockRe, _parseTextBlock) ||\n      // Inline html\n      this._ifTrueThen(firstChar === '<', _parseInlineHtml) ||\n      // Code block.\n      this._ifTrueThen(firstChar === '-', _parseCodeBlock) ||\n      // Output block.\n      this._matchLineThen(outputBlockRe, _parseOutputBlock) ||\n      // Embedded template.\n      this._matchLineThen(embededRe, _parseEmbeded) ||\n      // Doctype declaration\n      this._matchLineThen(doctypeRe, _parseDoctype) ||\n      // HTML tag\n      this._matchLineThen(tagRe, _parseTag)) {\n        this._pushOnTop(['newline']);\n        return;\n      }\n    this._syntaxError('Unknown line indicator');\n  }\n};\n\np._parseShortcutAttributes = function() {\n  // Find any shortcut attributes\n  var attributes = ['html', 'attrs'], m;\n  while ((m = attrShortcutRe.exec(this._line))) {\n    // The class/id attribute is :static instead of 'slm' 'interpolate',\n    // because we don't want text interpolation in .class or #id shortcut\n    var shortcut = attrShortcut[m[1]];\n    if (!shortcut) {\n      this._syntaxError('Illegal shortcut');\n    }\n\n    for (var i = 0, il = shortcut.length; i < il; i++) {\n      attributes.push(['html', 'attr', shortcut[i], ['static', m[2]]]);\n    }\n\n    this._sliceLine(m[0].length);\n  }\n  return attributes;\n};\n\np._parseTag = function(tag) {\n  var m, trailingWS, leadingWS;\n  if (tagShortcut[tag]) {\n    tag = tagShortcut[tag];\n  }\n\n  var attributes = this._parseShortcutAttributes();\n  m = /^[<>]+/.exec(this._line);\n  if (m) {\n    this._sliceLine(m[0].length);\n    trailingWS = m[0].indexOf('>') !== -1;\n    leadingWS = m[0].indexOf('<') !== -1;\n  }\n\n  this._parseAttributes(attributes);\n\n  tag = ['html', 'tag', tag, attributes];\n\n  if (leadingWS) {\n    this._pushOnTop(['static', ' ']);\n  }\n  this._pushOnTop(tag);\n  if (trailingWS) {\n    this._pushOnTop(['static', ' ']);\n  }\n\n  for(;;) {\n    // Block expansion\n    m = blockExpressionRe.exec(this._line);\n    if (m) {\n      this._sliceLine(m[0].length);\n      if (!(m = tagRe.exec(this._line))) {\n        this._syntaxError('Expected tag');\n      }\n\n      if (m[1]) {\n        this._sliceLine(m[0].length);\n      }\n\n      var content = ['multi'];\n      tag.push(content);\n\n      var sl = this._stacks.length;\n      this._stacks.push(content);\n      this._parseTag(m[0]);\n      this._stacks.splice(sl, 1);\n\n      break;\n    }\n\n    // Handle output code\n    m = outputCodeRe.exec(this._line);\n    if (m) {\n      this._sliceLine(m[0].length);\n      var trailingWS2 = m[2].indexOf('>') !== -1;\n\n      var block = ['multi'];\n\n      if (!leadingWS && m[2].indexOf('<') !== -1) {\n        var lastStack = this._stacks._last();\n        lastStack.splice(lastStack.length - 1, 0, ['static', ' ']);\n      }\n\n      tag.push(['slm', 'output', m[1] !== '=', this._parseBrokenLine(), block]);\n      if (!trailingWS && trailingWS2) {\n        this._pushOnTop(['static', ' ']);\n      }\n      this._stacks.push(block);\n      break;\n    }\n\n    // Closed tag. Do nothing\n    m = closedTagRe.exec(this._line);\n    if (m) {\n      this._sliceLine(m[0].length);\n      if (this._line.length) {\n        this._syntaxError('Unexpected text after closed tag');\n      }\n      break;\n    }\n\n    // Empty content\n    if (emptyLineRe.test(this._line)) {\n      var emptyContent = ['multi'];\n      tag.push(emptyContent);\n      this._stacks.push(emptyContent);\n      break;\n    }\n\n    // Text content\n    m = textContentRe.exec(this._line);\n    if (m) {\n      tag.push(['slm', 'text', this._parseTextBlock(m[2], this._origLine.length - this._line.length + m[1].length, true)]);\n      break;\n    }\n\n    break;\n  }\n};\n\np._parseAttributes = function(attributes) {\n  // Check to see if there is a delimiter right after the tag name\n  var delimiter, m;\n\n  m = attrDelimRe.exec(this._line);\n  if (m) {\n    delimiter = this._attrDelims[m[1]];\n    this._sliceLine(m[0].length);\n  }\n\n  var booleanAttrRe, endRe;\n  if (delimiter) {\n    booleanAttrRe = new RegExp(this._attrName + '(?=(\\\\s|' + this._escapeRegExp(delimiter) + '|$))');\n    endRe = new RegExp('^\\\\s*' + this._escapeRegExp(delimiter));\n  }\n\n  while (true) {\n    // Value is quoted (static)\n    m = this._quotedAttrRe.exec(this._line);\n    if (m) {\n      this._sliceLine(m[0].length);\n      attributes.push(['html', 'attr', m[1],\n                      ['escape', !m[2].length, ['slm', 'interpolate', this._parseQuotedAttribute(m[3])]]]);\n      continue;\n    }\n\n    // Value is JS code\n    m = this._codeAttrRe.exec(this._line);\n    if (m) {\n      this._sliceLine(m[0].length);\n      var name = m[1], escape = !m[2].length;\n      var value = this._parseJSCode(delimiter);\n\n      if (!value.length) {\n        this._syntaxError('Invalid empty attribute');\n      }\n      attributes.push(['html', 'attr', name, ['slm', 'attrvalue', escape, value]]);\n      continue;\n    }\n\n    if (!delimiter) {\n      break;\n    }\n\n    // Boolean attribute\n    m = booleanAttrRe.exec(this._line);\n    if (m) {\n      this._sliceLine(m[0].length);\n      attributes.push(['html', 'attr', m[1], ['multi']]);\n      continue;\n    }\n    // Find ending delimiter\n    m = endRe.exec(this._line);\n    if (m) {\n      this._sliceLine(m[0].length);\n      break;\n    }\n\n    // Found something where an attribute should be\n    this._line = this._line.replace(indentationRe, '');\n    if (this._line.length) {\n      this._syntaxError('Expected attribute');\n    }\n\n    // Attributes span multiple lines\n    this._pushOnTop(['newline']);\n\n    if (!this._lines.length) {\n      this._syntaxError('Expected closing delimiter ' + delimiter);\n    }\n    this._nextLine();\n  }\n};\n\np._parseTextBlock = function(firstLine, textIndent, inTag) {\n  var result = ['multi'];\n\n  if (!firstLine || !firstLine.length) {\n    textIndent = null;\n  } else {\n    result.push(['slm', 'interpolate', firstLine]);\n  }\n\n  var emptyLines = 0;\n\n  while (this._lines.length) {\n    if (emptyLineRe.test(this._lines[0])) {\n      this._nextLine();\n      result.push(['newline']);\n\n      if (textIndent) {\n        emptyLines++;\n      }\n    } else {\n      var indent = this._getIndent(this._lines[0]);\n\n      if (indent <= this._indents._last()) {\n        break;\n      }\n\n      if (emptyLines) {\n        result.push(['slm', 'interpolate', new Array(emptyLines + 1).join('\\n')]);\n        emptyLines = 0;\n      }\n\n      this._nextLine();\n      this._line = this._line.replace(indentationRe, '');\n\n      // The text block lines must be at least indented\n      // as deep as the first line.\n\n      var offset = textIndent ? indent - textIndent : 0;\n\n      if (offset < 0) {\n        this._syntaxError('Text line not indented deep enough.\\n' +\n                         'The first text line defines the necessary text indentation.' +\n                         (inTag ? '\\nAre you trying to nest a child tag in a tag containing text? Use | for the text block!' : ''));\n      }\n\n      result.push(['newline']);\n      result.push(['slm', 'interpolate', (textIndent ? '\\n' : '') + new Array(offset + 1).join(' ') + this._line]);\n\n      // The indentation of first line of the text block\n      // determines the text base indentation.\n      textIndent = textIndent || indent;\n    }\n  }\n\n  return result;\n};\n\n\np._parseBrokenLine = function() {\n  var brokenLine = this._line.trim(), m;\n  while ((m = nextLineRe.exec(brokenLine))) {\n    this._expectNextLine();\n    if (m[0] === '\\\\') {\n      brokenLine = brokenLine.slice(0, brokenLine.length - 2);\n    }\n    brokenLine += '\\n' + this._line;\n  }\n  return brokenLine;\n};\n\np._parseJSCode = function(outerDelimeter) {\n  var code = '', count = 0, delimiter, closeDelimiter, m;\n\n  // Attribute ends with space or attribute delimiter\n  var endRe = new RegExp('^[\\\\s' + this._escapeRegExp(outerDelimeter) + ']');\n\n  while (this._line.length && (count || !endRe.test(this._line))) {\n    m = nextLineRe.exec(this._line);\n    if (m) {\n      if (m[0] === '\\\\') {\n        code += this._line.slice(0, this._line.length - 2);\n      } else  {\n        code += this._line;\n      }\n      code += '\\n';\n      this._expectNextLine();\n    } else {\n      if (count > 0) {\n        if (this._line[0] === delimiter[0]) {\n          count++;\n        } else if (this._line[0] === closeDelimiter[0]) {\n          count--;\n        }\n      } else {\n        m = delimRe.exec(this._line);\n        if (m) {\n          count = 1;\n          delimiter = m[0];\n          closeDelimiter = this._attrDelims[delimiter];\n        }\n      }\n\n      code += this._line[0];\n      this._sliceLine(1);\n    }\n  }\n\n  if (count) {\n    this._syntaxError('Expected closing delimiter ' + closeDelimiter);\n  }\n  return code;\n};\n\np._parseQuotedAttribute = function(quote) {\n  var value = '', count = 0;\n\n  while (count !== 0 || this._line[0] !== quote) {\n    var m = /^(\\\\)?$/.exec(this._line);\n    if (m) {\n      value += m[1] ? ' ' : '\\n';\n      this._expectNextLine();\n    } else {\n      var firstChar = this._line[0];\n      if (count > 0) {\n        if (firstChar === '{') {\n          count++;\n        } else if (firstChar === '}') {\n          count--;\n        }\n      } else if (/^\\$\\{/.test(this._line)) {\n        value += firstChar;\n        this._sliceLine(1);\n        count = 1;\n      }\n\n      value += this._line[0];\n      this._sliceLine(1);\n    }\n  }\n\n  this._sliceLine(1);\n\n  return value;\n};\n\np._syntaxError = function(message) {\n  var column = (this._origLine !== null && this._line !== null) ? this._origLine.length - this._line.length : 0;\n  column += 1;\n  var msg = [\n    message,\n    '  ' + (this._file || '(__TEMPLATE__)') + ', Line ' + this._lineno + ', Column ' + column,\n    '  ' + (this._origLine || ''),\n    '  ' + new Array(column).join(' ') + '^',\n    ''\n  ].join('\\n');\n  throw new Error(msg);\n};\n\np._expectNextLine = function() {\n  if (this._nextLine() === null) {\n    this._syntaxError('Unexpected end of file');\n  }\n  this._line = this._line.trim();\n};\n\nmodule.exports = Parser;\n","/home/travis/build/npmtest/node-npmtest-slm/node_modules/slm/lib/filters/static_merger.js":"var Filter = require('../filter');\n\n/**\n* Merges several statics into a single static.  Example:\n*\n*   ['multi',\n*     ['static', 'Hello '],\n*     ['static', 'World!']]\n*\n* Compiles to:\n*\n*   ['static', 'Hello World!']\n*/\n\nfunction StaticMerger() {}\nStaticMerger.prototype = new Filter();\n\nStaticMerger.prototype.on_multi = function(exps) {\n  var res = ['multi'], node;\n\n  for (var i = 1, l = exps.length; i < l; i++) {\n    var exp = exps[i];\n    if (exp[0] === 'static') {\n      if (node) {\n        node[1] += exp[1];\n      } else {\n        node = ['static', exp[1]];\n        res.push(node);\n      }\n    } else {\n      res.push(this.compile(exp));\n      if (exp[0] !== 'newline') {\n        node = null;\n      }\n    }\n  }\n\n  return res.length === 2 ? res[1] : res;\n};\n\nmodule.exports = StaticMerger;\n","/home/travis/build/npmtest/node-npmtest-slm/node_modules/slm/lib/generators/string.js":"var Generator = require('../generator');\n\nfunction StringGenerator(name, initializer) {\n  this._buffer = name || '_b';\n  this._initializer = initializer;\n}\nvar p = StringGenerator.prototype = new Generator();\n\np.preamble = function() {\n  return this._initializer ? this._initializer : 'var ' + this._buffer + '=\\'\\';';\n};\n\np.on_capture = function(exps) {\n  var generator = new StringGenerator(exps[1], exps[2]);\n  generator._dispatcher = this._dispatcher;\n  return generator.exec(exps[3]);\n};\n\nmodule.exports = StringGenerator;\n","/home/travis/build/npmtest/node-npmtest-slm/node_modules/slm/lib/generator.js":"var Dispatcher = require('./dispatcher');\n\nfunction Generator() {\n  this._buffer = '_b';\n}\n\nvar p = Generator.prototype = new Dispatcher();\n\np.exec = function(exp) {\n  return [this.preamble(), this.compile(exp)].join('');\n};\n\np.on = function(exp) {\n  throw new Error('Generator supports only core expressions - found ' + JSON.stringify(exp));\n};\n\np.on_multi = function(exps) {\n  for (var i = 1, l = exps.length; i < l; i++) {\n    exps[i] = this.compile(exps[i]);\n  }\n  exps.shift();\n  return exps.join('\\n');\n};\n\np.on_newline = function() {\n  return '';\n};\n\np.on_static = function(exps) {\n  return this.concat(JSON.stringify(exps[1]));\n};\n\np.on_dynamic = function(exps) {\n  return this.concat(exps[1]);\n};\n\np.on_code = function(exps) {\n  return exps[1];\n};\n\np.concat = function(str) {\n  return this._buffer + '+=' + str + ';';\n};\n\nmodule.exports = Generator;\n","/home/travis/build/npmtest/node-npmtest-slm/node_modules/slm/lib/vm_node.js":"var FS = require('fs');\nvar NodeVM = require('vm');\nvar Path = require('path');\nvar VM = require('./vm');\n\nfunction VMNode() { VM.call(this); }\n\nvar p = VMNode.prototype = new VM();\n\np.runInContext = NodeVM.runInThisContext;\n\np._loadWithoutCache = function(path) {\n  var src = FS.readFileSync(path, 'utf8');\n  return this.runInContext(this.template.src(src, {filename: this.filename}), this.filename)[0];\n};\n\np._resolvePath = function(path) {\n  var basename = Path.basename,\n      dirname  = Path.dirname,\n      join = Path.join;\n\n  if (path[0] !== '/' && !this.filename) {\n    throw new Error('the \"filename\" option is required to use with \"relative\" paths');\n  }\n\n  if (path[0] === '/' && !this.basePath) {\n    throw new Error('the \"basePath\" option is required to use with \"absolute\" paths');\n  }\n\n  path = join(path[0] === '/' ? this.basePath : dirname(this.filename), path);\n\n  if (basename(path).indexOf('.') === -1) {\n    path += '.slm';\n  }\n\n  return path;\n};\n\nmodule.exports = VMNode;\n","/home/travis/build/npmtest/node-npmtest-slm/node_modules/slm/Gulpfile.js":"var gulp = require('gulp');\nvar _ = require('gulp-load-plugins')();\n\ngulp.task('default', ['test']);\n\ngulp.task('test', function(cb) {\n  var spawn = require('child_process').spawn;\n  var child = spawn('npm', ['test'], {stdio: 'inherit'});\n  child.on('exit', function(code) {\n    cb(code ? new Error('Tests Failed') : null);\n  });\n});\n\ngulp.task('build', ['browser', 'vm']);\n\ngulp.task('browser', function() {\n  var vars = [], varsMap = {};\n\n  var replacePrivate = function(name) {\n    var map = varsMap[name];\n    if (!map) {\n      vars.push(name);\n      map = '._' + vars.length.toString(32);\n      varsMap[name] = map;\n      // console.log(vars.length, map, name);\n    }\n\n    return map;\n  };\n\n  gulp.src('lib/slm_browser.js')\n  .pipe(_.webpack({\n      output: {\n        filename: 'slm-browser.js',\n        library: 'Slm',\n        libraryTarget: 'umd'\n      }\n  }))\n  .pipe(_.size({showFiles: true}))\n  .pipe(gulp.dest('dist'))\n  .pipe(_.replace( /\\._(\\w+)/g, replacePrivate))\n  .pipe(_.uglify())\n  .pipe(_.concat('slm-browser.min.js'))\n  .pipe(_.size({showFiles: true}))\n  .pipe(gulp.dest('dist'))\n  .pipe(_.gzip())\n  .pipe(_.size({showFiles: true}))\n  .pipe(gulp.dest('dist'));\n});\n\ngulp.task('vm', function() {\n  var vars = [];\n  var varsMap = {};\n\n  var replacePrivate = function(name) {\n    var map = varsMap[name];\n    if (!map) {\n      vars.push(name);\n      map = varsMap[name] = '._' + vars.length.toString(32);\n    }\n\n    return map;\n  };\n\n  gulp.src('lib/vm_browser.js')\n  .pipe(_.webpack({\n      output: {\n        filename: 'slm-vm-browser.js',\n        library: 'SlmVM',\n        libraryTarget: 'umd'\n      }\n  }))\n  .pipe(_.size({showFiles: true}))\n  .pipe(gulp.dest('dist'))\n  .pipe(_.replace( /\\._(\\w+)/g, replacePrivate))\n  .pipe(_.uglify())\n  .pipe(_.concat('slm-vm-browser.min.js'))\n  .pipe(_.size({showFiles: true}))\n  .pipe(gulp.dest('dist'))\n  .pipe(_.gzip())\n  .pipe(_.size({showFiles: true}))\n  .pipe(gulp.dest('dist'));\n});\n","/home/travis/build/npmtest/node-npmtest-slm/node_modules/slm/lib/slm_browser.js":"var Template = require('./template');\nvar template = new Template(require('./vm_browser'));\n\nmodule.exports = template.exports();\n","/home/travis/build/npmtest/node-npmtest-slm/node_modules/slm/lib/vm_browser.js":"var VM = require('./vm');\n\nfunction VMBrowser() { VM.call(this); }\n\nvar p = VMBrowser.prototype = new VM();\n\np.runInContext = function(src, filename) {\n  if (filename) {\n    src += '\\n//# sourceURL=' + filename;\n  }\n  return eval(src);\n};\n\np._resolvePath = function() {};\n\nmodule.exports = VMBrowser;\n"}